<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ðŸš€ PowerCoin Staking ðŸš€</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdn.jsdelivr.net/npm/web3@1.7.4/dist/web3.min.js"></script>
</head>

<body>
    <header>
        <h1>ðŸš€ PowerCoin Staking ðŸš€</h1>
    </header>

    <section id="wallet">
        <button onclick="connectWallet()">Connect Wallet</button>
        <p id="walletAddress">Not connected</p>
    </section>

    <main>
        <section id="price">
            <h2>Current PWR Price: <span id="pwrPrice">Loading...</span></h2>
        </section>

        <section id="staking">
            <h2>Stake Your PWR/PLS LP Tokens</h2>
            <input type="number" id="stakeAmount" placeholder="Enter amount">
            <button onclick="autoStake()">Stake LP Tokens</button>
        </section>

        <section id="unstake">
            <h2>Unstake LP Tokens</h2>
            <button onclick="unstakeTokens()">Unstake</button>
            <p id="unstakeCountdown"></p>
        </section>

        <section id="rewards">
            <h2>Claim Rewards</h2>
            <button onclick="claimRewards()">Claim Rewards</button>
        </section>

        <section id="activeStakes">
            <h2>Your Active Stakes</h2>
            <button onclick="showActiveStakes()">View Active Stakes</button>
            <ul id="activeStakesList"></ul>
        </section>
    </main>

    <footer>
        <p>&copy; 2025 PowerCoin Staking</p>
    </footer>

    <script>
        let web3, contract, lpTokenContract;

        const contractAddress = "0x4936e0DFa40F5Ada61920d6Bbfd12D2BA88FfAe8";
        const lpTokenAddress = "0xe5c56E4a8F8d96e3A91b18D83b7f0c36663C9a74";

        const contractABI = [{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unstake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"getActiveStakes","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"}];
        const lpTokenABI = [{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}];

        async function connectWallet() {
            if (window.ethereum) {
                web3 = new Web3(window.ethereum);
                await window.ethereum.request({ method: "eth_requestAccounts" });
                const accounts = await web3.eth.getAccounts();
                document.getElementById("walletAddress").innerText = `Connected: ${accounts[0]}`;
                contract = new web3.eth.Contract(contractABI, contractAddress);
                lpTokenContract = new web3.eth.Contract(lpTokenABI, lpTokenAddress);
            } else {
                alert("MetaMask not detected");
            }
        }

        async function showActiveStakes() {
            const accounts = await web3.eth.getAccounts();
            const stakes = await contract.methods.getActiveStakes(accounts[0]).call();
            const stakeList = stakes.map((amt, index) => `<li>Stake ${index + 1}: ${web3.utils.fromWei(amt, "ether")} LP Tokens</li>`).join('');
            document.getElementById("activeStakesList").innerHTML = stakeList;
        }

        async function fetchPwrPrice() {
            const res = await fetch('https://api.dexscreener.com/latest/dex/tokens/0x3Eb3B7b3D95Cb3699295D7868F85e43b56AeeFcB');
            const data = await res.json();
            document.getElementById('pwrPrice').innerText = data.pairs[0].priceUsd;
        }

        fetchPwrPrice();
        setInterval(fetchPwrPrice, 10000);

        async function autoStake() {
            const accounts = await web3.eth.getAccounts();
            const stakeAmount = document.getElementById("stakeAmount").value;
            if (!stakeAmount || stakeAmount <= 0) {
                alert("Enter a valid stake amount.");
                return;
            }
            try {
                const allowance = await lpTokenContract.methods.allowance(accounts[0], contractAddress).call();
                if (BigInt(allowance) < BigInt(web3.utils.toWei(stakeAmount, "ether"))) {
                    await lpTokenContract.methods.approve(contractAddress, web3.utils.toWei(stakeAmount, "ether")).send({ from: accounts[0] });
                }
                const tx = await contract.methods.stake(web3.utils.toWei(stakeAmount, "ether")).send({ from: accounts[0], gas: 300000 });
                alert("Stake successful! TX: " + tx.transactionHash);
            } catch (error) {
                alert("Stake failed: " + error.message);
            }
        }

    </script>
</body>

</html>
